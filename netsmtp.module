<?php
/**
 * @file
 * Net SMTP module.
 */

/**
 * Implements hook_boot().
 */
function netsmtp_boot() {
  if (!variable_get('netsmtp_autoload_disable')) {
    spl_autoload_register(function ($name) {
      // This is rudimentary, but it works fine.
      if ('Net_SMTP' === $name) {
        return include_once __DIR__ . '/lib/Net/SMTP.php';
      } else if ('Net_Socket' === $name) {
        return include_once __DIR__ . '/lib/Net/Socket.php';
      } else if ('PEAR' === $name) {
        return include_once __DIR__ . '/lib/PEAR.php';
      } else if ('PEAR5' === $name) {
        return include_once __DIR__ . '/lib/PEAR5.php';
      } else if ('NetStmp_DrupalMailSystem' === $name) {
        return include_once __DIR__ . '/lib/NetSmtp/DrupalMailSystem.php';
      } else if ('NetSmtp_MailSystemProxy' === $name) {
        return include_once __DIR__ . '/lib/NetSmtp/MailSystemProxy.php';
      } else if ('NetSmtp_RawFormatter' === $name) {
        return include_once __DIR__ . '/lib/NetSmtp/RawFormatter.php';
      }
      return false;
    });
  }
}

/**
 * Implements hook_mail_alter().
 */
function netsmtp_mail_alter(&$message) {

  if (variable_get('netsmtp_debug_trace', false)) {

    $path = variable_get('netsmtp_debug_trace_path', 'temporary://netsmtp');
    file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $filename = $path . '/netsmtp-trace-' . date('Y-m-d') . '.log';

    $data = array();
    $data[] = 'Sent at ' . date('Y_m_d-H_i_s');
    $data[] = 'Module: ' . $message['module'] . ', key: ' . $message['key'];
    $data[] = 'Recipient: ' . $message['to'];
    $data[] = 'Subject: ' . $message['subject'];
    $data[] = 'Stack trace:';
    ob_start();
    debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
    $data[] = ob_get_clean();
    $data[] = '';

    file_put_contents($filename, implode("\n", $data), FILE_APPEND | LOCK_EX );
  }

  if ($recipient = variable_get('netsmtp_catch', array())) {

    $message['headers']['X-Catched-Mail-Key'] = isset($message['id']) ? $message['id'] : null;
    $message['headers']['X-Catched-Website'] = url('<front>', array('absolute' => true));
    $message['headers']['X-Catched-Original-To'] = $message['to'];
    $message['to'] = is_array($recipient) ? implode(',', $recipient) : $recipient;

    foreach ($message['headers'] as $header => $value) {
      switch (strtolower($header)) {

        case 'cc':
        case 'bcc':
          unset($message['headers'][$header]);
          $message['headers']['X-Rerouted-Original-' . $header] = $value;
          break;
      }
    }
  }
}
